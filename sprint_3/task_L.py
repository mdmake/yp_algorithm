"""
L Два велосипеда

Вася решил накопить денег на два одинаковых велосипеда — себе и сестре. У Васи есть копилка, в которую каждый день он может добавлять деньги (если, конечно, у него есть такая финансовая возможность). В процессе накопления Вася не вынимает деньги из копилки.
У вас есть информация о росте Васиных накоплений — сколько у Васи в копилке было денег в каждый из дней.
Ваша задача — по заданной стоимости велосипеда определить
первый день, в которой Вася смог бы купить один велосипед,
и первый день, в который Вася смог бы купить два велосипеда.
Подсказка: решение должно работать за O(log n).

Формат ввода

В первой строке дано число дней n, по которым велись наблюдения за Васиными накоплениями. 1 ≤ n ≤ 106.
В следующей строке записаны n целых неотрицательных чисел. Числа идут в порядке неубывания. Каждое из чисел не превосходит 106.
В третьей строке записано целое положительное число s — стоимость велосипеда. Это число не превосходит 106.
Формат вывода

Нужно вывести два числа — номера дней по условию задачи.
Если необходимой суммы в копилке не нашлось, нужно вернуть -1 вместо номера дня.

Пример 1

Ввод
6
1 2 4 4 6 8
3

Вывод
3 5
"""

import sys


def binarySearch(arr, x, left, right):
    if right <= left:  # промежуток пуст
        return -1
    # промежуток не пуст
    mid = (left + right) // 2

    if arr[mid - 1] <= x <= arr[mid]:
        if arr[mid - 1] < x:
            return mid + 1
        else:
            return mid

    elif x < arr[mid]:  # искомый элемент меньше центрального
        # значит следует искать в левой половине
        return binarySearch(arr, x, left, mid)
    else:  # иначе следует искать в правой половине
        return binarySearch(arr, x, mid + 1, right)


if __name__ == "__main__":
    n = int(sys.stdin.readline().rstrip())
    data = list(map(int, sys.stdin.readline().rstrip().split()))
    price = int(sys.stdin.readline().rstrip())

    if price < data[0]:
        day1 = 1
    elif price > data[-1]:
        day1 = -1
    else:
        day1 = binarySearch(data, price, 0, n)

    if price*2 < data[0]:
        day2 = 1
    elif price*2 > data[-1]:
        day2 = -1
    else:
        day2 = binarySearch(data, price * 2, day1 - 1, n)

    print(day1, day2)
