"""
Номер посылки 66370215


-- ПРИНЦИП РАБОТЫ --
Я реализовал расчет расстояния по Левенштейну
В процессе работы использовались материалы практикума,
https://ru.wikipedia.org/wiki/Расстояние_Левенштейна
и https://habr.com/ru/post/117063/

Расстояние Левинштейна -- метрика, измеряющая разность между двумя последовательностями символов
Разность считается как минимальное количество операций вставки, удаления, замены символов, позволяющее получить
из одной строки другую


-- ВРЕМЕННАЯ СЛОЖНОСТЬ --
Мы фактически обходим массив размерностью N*M - сложность O(M*N),


-- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ

В общем виде нам бы потребовалось N*M места, но при вычислении только рредакционного расстояния нам нужна только
текущая строка и предыдущая -- 2*N, O(N) места
"""

import sys


def levenshtein(s1: str, s2: str) -> int:
    """
    Принимает на вход две строки и рассчитывает расстояние Левинштейна между ними

    :param s1: первая строка
    :param s2: вторая строка
    :return: расстояние Левинштейна
    """

    m = len(s1) + 1
    n = len(s2) + 1

    dprev, dnext = [[0] * n for _ in range(2)]

    for j in range(1, n):
        dprev[j] = dprev[j - 1] + 1

    for i in range(1, m):

        dnext[0] = dprev[0] + 1
        for j in range(1, n):

            if s1[i - 1] != s2[j - 1]:
                dnext[j] = dprev[j - 1] + 1
            else:
                dnext[j] = dprev[j - 1]

            dnext[j] = min(dprev[j] + 1, dnext[j - 1] + 1, dnext[j])

        dnext, dprev = dprev, dnext

    return dprev[-1]


def main():
    # по вертикали
    s1 = list(sys.stdin.readline().rstrip())
    # по горизонтали
    s2 = list(sys.stdin.readline().rstrip())

    # строки
    result = levenshtein(s1, s2)

    print(result)


if __name__ == '__main__':
    main()
